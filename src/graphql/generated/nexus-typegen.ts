/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import {Context} from './../context'
import {FieldAuthorizeResolver} from 'nexus/dist/plugins/fieldAuthorizePlugin'
import {core} from 'nexus'
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>
    ): void // "DateTime";
    /**
     * A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
     */
    email<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>
    ): void // "EmailAddress";
    /**
     * A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
     */
    jwt<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>
    ): void // "JWT";
    /**
     * A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
     */
    url<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>
    ): void // "URL";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void // "DateTime";
    /**
     * A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
     */
    email<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void // "EmailAddress";
    /**
     * A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
     */
    jwt<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void // "JWT";
    /**
     * A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
     */
    url<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void // "URL";
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  UserFilters: {
    // input type
    id: string // String!
  }
}

export interface NexusGenEnums {}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
  EmailAddress: any
  JWT: any
  URL: any
}

export interface NexusGenObjects {
  Chat: {
    // root type
    createdAt?: NexusGenScalars['DateTime'] | null // DateTime
    id?: string | null // String
    messages?: Array<NexusGenRootTypes['Message'] | null> | null // [Message]
    updatedAt?: NexusGenScalars['DateTime'] | null // DateTime
    users?: Array<NexusGenRootTypes['User'] | null> | null // [User]
  }
  Message: {
    // root type
    chat?: NexusGenRootTypes['Chat'] | null // Chat
    createdAt?: NexusGenScalars['DateTime'] | null // DateTime
    id?: string | null // String
    text?: string | null // String
    updatedAt?: NexusGenScalars['DateTime'] | null // DateTime
    user?: NexusGenRootTypes['User'] | null // User
  }
  Mutation: {}
  Query: {}
  Session: {
    // root type
    data: string // String!
    expiresAt: NexusGenScalars['DateTime'] // DateTime!
    id: string // String!
    sid: string // String!
  }
  User: {
    // root type
    chats?: Array<NexusGenRootTypes['Chat'] | null> | null // [Chat]
    createdAt: NexusGenScalars['DateTime'] // DateTime!
    displayName?: string | null // String
    email: NexusGenScalars['EmailAddress'] // EmailAddress!
    fullName: string // String!
    id: string // String!
    image?: NexusGenScalars['URL'] | null // URL
    updatedAt: NexusGenScalars['DateTime'] // DateTime!
    verifiedAt?: NexusGenScalars['DateTime'] | null // DateTime
  }
}

export interface NexusGenInterfaces {}

export interface NexusGenUnions {}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Chat: {
    // field return type
    createdAt: NexusGenScalars['DateTime'] | null // DateTime
    id: string | null // String
    messages: Array<NexusGenRootTypes['Message'] | null> | null // [Message]
    updatedAt: NexusGenScalars['DateTime'] | null // DateTime
    users: Array<NexusGenRootTypes['User'] | null> | null // [User]
  }
  Message: {
    // field return type
    chat: NexusGenRootTypes['Chat'] | null // Chat
    createdAt: NexusGenScalars['DateTime'] | null // DateTime
    id: string | null // String
    text: string | null // String
    updatedAt: NexusGenScalars['DateTime'] | null // DateTime
    user: NexusGenRootTypes['User'] | null // User
  }
  Mutation: {
    // field return type
    signIn: NexusGenRootTypes['User'] // User!
    signUp: NexusGenRootTypes['User'] // User!
  }
  Query: {
    // field return type
    chats: NexusGenRootTypes['Chat'][] // [Chat!]!
    findUniqueUser: NexusGenRootTypes['User'] | null // User
    me: NexusGenRootTypes['User'] | null // User
    ok: boolean | null // Boolean
  }
  Session: {
    // field return type
    data: string // String!
    expiresAt: NexusGenScalars['DateTime'] // DateTime!
    id: string // String!
    sid: string // String!
  }
  User: {
    // field return type
    chats: Array<NexusGenRootTypes['Chat'] | null> | null // [Chat]
    createdAt: NexusGenScalars['DateTime'] // DateTime!
    displayName: string | null // String
    email: NexusGenScalars['EmailAddress'] // EmailAddress!
    fullName: string // String!
    id: string // String!
    image: NexusGenScalars['URL'] | null // URL
    updatedAt: NexusGenScalars['DateTime'] // DateTime!
    verifiedAt: NexusGenScalars['DateTime'] | null // DateTime
  }
}

export interface NexusGenFieldTypeNames {
  Chat: {
    // field return type name
    createdAt: 'DateTime'
    id: 'String'
    messages: 'Message'
    updatedAt: 'DateTime'
    users: 'User'
  }
  Message: {
    // field return type name
    chat: 'Chat'
    createdAt: 'DateTime'
    id: 'String'
    text: 'String'
    updatedAt: 'DateTime'
    user: 'User'
  }
  Mutation: {
    // field return type name
    signIn: 'User'
    signUp: 'User'
  }
  Query: {
    // field return type name
    chats: 'Chat'
    findUniqueUser: 'User'
    me: 'User'
    ok: 'Boolean'
  }
  Session: {
    // field return type name
    data: 'String'
    expiresAt: 'DateTime'
    id: 'String'
    sid: 'String'
  }
  User: {
    // field return type name
    chats: 'Chat'
    createdAt: 'DateTime'
    displayName: 'String'
    email: 'EmailAddress'
    fullName: 'String'
    id: 'String'
    image: 'URL'
    updatedAt: 'DateTime'
    verifiedAt: 'DateTime'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    signIn: {
      // args
      email: NexusGenScalars['EmailAddress'] // EmailAddress!
      password: string // String!
    }
    signUp: {
      // args
      email: NexusGenScalars['EmailAddress'] // EmailAddress!
      fullName: string // String!
      password: string // String!
    }
  }
  Query: {
    findUniqueUser: {
      // args
      where: NexusGenInputs['UserFilters'] // UserFilters!
    }
  }
}

export interface NexusGenAbstractTypeMembers {}

export interface NexusGenTypeInterfaces {}

export type NexusGenObjectNames = keyof NexusGenObjects

export type NexusGenInputNames = keyof NexusGenInputs

export type NexusGenEnumNames = never

export type NexusGenInterfaceNames = never

export type NexusGenScalarNames = keyof NexusGenScalars

export type NexusGenUnionNames = never

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never

export type NexusGenAbstractsUsingStrategyResolveType = never

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context
  inputTypes: NexusGenInputs
  rootTypes: NexusGenRootTypes
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars
  argTypes: NexusGenArgTypes
  fieldTypes: NexusGenFieldTypes
  fieldTypeNames: NexusGenFieldTypeNames
  allTypes: NexusGenAllTypes
  typeInterfaces: NexusGenTypeInterfaces
  objectNames: NexusGenObjectNames
  inputNames: NexusGenInputNames
  enumNames: NexusGenEnumNames
  interfaceNames: NexusGenInterfaceNames
  scalarNames: NexusGenScalarNames
  unionNames: NexusGenUnionNames
  allInputTypes:
    | NexusGenTypes['inputNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['scalarNames']
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames']
  allNamedTypes:
    | NexusGenTypes['allInputTypes']
    | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames']
  abstractTypeMembers: NexusGenAbstractTypeMembers
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType
  features: NexusGenFeaturesConfig
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {}
  interface NexusGenPluginSchemaConfig {}
  interface NexusGenPluginArgConfig {}
}
